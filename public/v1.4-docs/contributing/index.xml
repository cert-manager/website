<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>cert-manager – Contributing</title>
    <link>https://cert-manager.io/v1.4-docs/contributing/</link>
    <description>Recent content in Contributing on cert-manager</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	  <atom:link href="https://cert-manager.io/v1.4-docs/contributing/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>V1.4-Docs: Building cert-manager</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/building/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/building/</guid>
      <description>
        
        
        &lt;p&gt;cert-manager makes use of &lt;a href=&#34;https://bazel.build/&#34;&gt;Bazel&lt;/a&gt; to build the project.
Bazel manages all developer dependencies, Helm chart building, Docker images and the code itself.
We try to use it as much as possible.
We currently use Bazel &lt;code&gt;v3.7.2&lt;/code&gt;. The minimum supported version is &lt;code&gt;v3.5.0&lt;/code&gt;.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: are you using GoLand? Make sure to exclude the &lt;code&gt;bazel-&lt;/code&gt; folders! You can do this by right clicking on the folder -&amp;gt; Mark Directory As -&amp;gt; Excluded
This will save you a ton of CPU time!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: are you sitting on a corporate network with internal PKI? Bazel does not honor custom CA certificates by default, but depending on your OS
a &lt;a href=&#34;https://groups.google.com/g/bazel-discuss/c/13uPDObyfQg/m/UjPbalztCQAJ&#34;&gt;clean workaround might be available&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;a-quick-intro-to-bazel&#34;&gt;A quick intro to Bazel&lt;/h2&gt;
&lt;p&gt;Bazel has 3 main commands which we use:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;bazel build [...]&lt;/code&gt; will build and compile code for you e.g. &lt;code&gt;bazel build //cmd/ctl&lt;/code&gt; will build our CLI.
&lt;code&gt;bazel test [...]&lt;/code&gt; will run any tests for a given package
&lt;code&gt;bazel run [...]&lt;/code&gt; is only used to run certain scripts not the compiled code (unlike Go). e.g. &lt;code&gt;bazel run //hack/bin:helm&lt;/code&gt; will download and run Helm.&lt;/p&gt;
&lt;h3 id=&#34;package-format&#34;&gt;Package format&lt;/h3&gt;
&lt;p&gt;After any Bazel command you will see something that looks like a path.
Let&amp;rsquo;s take &lt;code&gt;bazel run //hack/bin:helm&lt;/code&gt; as an example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;//&lt;/code&gt; is the cert-manager project root, no matter in which directory under cert-manager you are it will find it&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hack/bin&lt;/code&gt; is the path where the code is to execute/build/test you will for example see &lt;code&gt;pkg/acme/&lt;/code&gt; to run ACME tests&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:helm&lt;/code&gt; is the part of the Bazel file to execute, these are defined in the Bazel config themselves.&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: &lt;code&gt;...&lt;/code&gt; is a recursive lookup in Bazel, it will run al tests in all subfolders when set, it is also the easiest way to invoke them.
For example &lt;code&gt;bazel test //pkg/...&lt;/code&gt; will test all tests in all packages.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;help-so-much-bazel&#34;&gt;Help so much Bazel!&lt;/h2&gt;
&lt;p&gt;No worries we have a lot of helper scripts for you!
Need to set up a local cluster and install cert-manager in it? Take a look at &lt;a href=&#34;../kind/&#34;&gt;our kind documentation&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;We also have a few very handy tools inside &lt;code&gt;./hack&lt;/code&gt; and &lt;code&gt;./devel&lt;/code&gt;. These are the most common ones which you can use:&lt;/p&gt;
&lt;h3 id=&#34;just-update-everything-you-can&#34;&gt;Just update everything you can!&lt;/h3&gt;
&lt;p&gt;Bazel takes care of a lot of automatic code generation for us, from generating CRD updates to updating its own &lt;code&gt;BUILD.bazel&lt;/code&gt; files.
If you just want to do everything at once (and have 5 minutes of your time) you can run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./hack/update-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will update everything you need without having to care about what needs changing.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; we strongly recommend running this before you create a PR!&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;i-need-granular-control&#34;&gt;I need granular control&lt;/h3&gt;
&lt;p&gt;You can also pick and mix the individual bash helper scripts:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;update-bazel.sh&lt;/code&gt;: updates the all &lt;code&gt;*.bazel&lt;/code&gt; files including formatting them&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update-codegen.sh&lt;/code&gt;: runs all code generation&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update-crds.sh&lt;/code&gt;: updates all CRD files to the latest scheme&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update-deps-licenses.sh&lt;/code&gt;: updates the &lt;code&gt;LICENCES&lt;/code&gt; file, needed when adding/updating dependencies&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update-deps.sh&lt;/code&gt;: installs new dependencies declared in the code and adds them into the Bazel and Go module files&lt;/li&gt;
&lt;li&gt;&lt;code&gt;update-gofmt.sh&lt;/code&gt;: runs &lt;code&gt;go fmt&lt;/code&gt; on all code&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Most of these have a &lt;code&gt;verify-*&lt;/code&gt; equivalent which will run inside our CI to verify all the scripts ran before merging the PR.&lt;/p&gt;
&lt;h2 id=&#34;building-the-project&#34;&gt;Building the project&lt;/h2&gt;
&lt;p&gt;You can ask Bazel to build the code for you to run in your local machine.
The output will end up in &lt;code&gt;bazel-out&lt;/code&gt; on your disk.&lt;/p&gt;
&lt;p&gt;You can get the exact path by looking at the Bazel output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Target //cmd/ctl:ctl up-to-date:
  bazel-out/k8-fastbuild-ST-4c64f0b3d5c7/bin/cmd/ctl/kubectl-cert_manager
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;building-the-go-binaries-for-local-os&#34;&gt;Building the Go binaries (for local OS)&lt;/h3&gt;
&lt;p&gt;You can build the controllers to run them locally using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bazel build //cmd/...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If you need them inside a local cluster check out &lt;a href=&#34;../kind/&#34;&gt;our kind documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h3 id=&#34;building-the-cli&#34;&gt;Building the CLI&lt;/h3&gt;
&lt;p&gt;You can use &lt;code&gt;go run ./cmd/ctl&lt;/code&gt; to quickly run the CLI.
You can also compile it using Bazel:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ bazel build //cmd/ctl
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;building-images&#34;&gt;Building images&lt;/h3&gt;
&lt;p&gt;If you need the Docker images you can generate these using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;APP_VERSION&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;dev&amp;#34;&lt;/span&gt;
$ &lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;DOCKER_REGISTRY&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;quay.io/jetstack/&amp;#34;&lt;/span&gt;
$ bazel run &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;		--stamp &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;		--platforms&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;@io_bazel_rules_go//go/toolchain:linux_amd64 &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;		//build:server-images
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;--stamp&lt;/code&gt; enables reproducible builds while &lt;code&gt;--platforms&lt;/code&gt; defines which images to build, in this example for AMD64 Linux.&lt;/p&gt;
&lt;h2 id=&#34;testing-the-project&#34;&gt;Testing the project&lt;/h2&gt;
&lt;p&gt;cert-manager has 3 kinds of tests, which can each be invoked separately to give you granular control.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Unit tests: you can either use &lt;code&gt;go test&lt;/code&gt; (or your IDE) here, or Bazel. For example &lt;code&gt;bazel test //pkg/acme/...&lt;/code&gt; runs all tests in the ACME package&lt;/li&gt;
&lt;li&gt;Integration tests: &lt;code&gt;bazel test //test/integration/...&lt;/code&gt; will run all integration tests against a Bazel operated &lt;code&gt;kube-apiserver&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;End-to-end tests: see the &lt;a href=&#34;../e2e/&#34;&gt;e2e documentation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: &lt;code&gt;...&lt;/code&gt; is a recursive lookup in Bazel, it will run all tests in all subfolders when set, it is also the easiest way to invoke them.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;but-i-like-makefiles-more&#34;&gt;But&amp;hellip; I like Makefiles more&lt;/h2&gt;
&lt;p&gt;We got you covered! The root of the repo has a &lt;code&gt;Makefile&lt;/code&gt; which you can use for quick actions. Which will use Bazel in the background.
We recommend &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/Makefile&#34;&gt;looking at the file&lt;/a&gt; to learn all possible options.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Contributing Flow</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/contributing-flow/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/contributing-flow/</guid>
      <description>
        
        
        &lt;p&gt;All of cert-manager&amp;rsquo;s development is done via
&lt;a href=&#34;https://github.com/jetstack/cert-manager&#34;&gt;GitHub&lt;/a&gt; which contains code, issues and pull
requests.&lt;/p&gt;
&lt;p&gt;All code for the documentation and cert-manager.io can be found at &lt;a href=&#34;https://github.com/cert-manager/website/&#34;&gt;the cert-manager/website repo&lt;/a&gt;.
Any issues towards the documentation should also be filed there.&lt;/p&gt;
&lt;h2 id=&#34;github-bot&#34;&gt;GitHub bot&lt;/h2&gt;
&lt;p&gt;We use &lt;a href=&#34;https://github.com/k8s-ci-robot/test-infra/tree/master/prow&#34;&gt;Prow&lt;/a&gt; on all our repositories.
If you&amp;rsquo;ve ever looked at a Kubernetes repo, you will probably already have met Prow. Prow will be able to help you in GitHub using its commands.
You can find then all &lt;a href=&#34;https://prow.build-infra.jetstack.net/command-help&#34;&gt;on the command help page&lt;/a&gt;.
Prow will also run all tests and assign certain labels on PRs.&lt;/p&gt;
&lt;h2 id=&#34;bugs&#34;&gt;Bugs&lt;/h2&gt;
&lt;p&gt;All bugs should be tracked as issues inside the
&lt;a href=&#34;https://github.com/jetstack/cert-manager/issues&#34;&gt;GitHub&lt;/a&gt; repository. Issues should then be
attached with the &lt;code&gt;kind/bug&lt;/code&gt; tag. To do this add &lt;code&gt;/kind bug&lt;/code&gt; to your issue description.
This may then be assigned a priority and milestone to be addressed in a future release.&lt;/p&gt;
&lt;p&gt;The more logs and information you can give about what and how the bug has been
discovered, the faster it can be resolved.&lt;/p&gt;
&lt;p&gt;Critical bug fixes are typically also cherry picked to the current minor stable releases.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: If you are simply looking for &lt;em&gt;troubleshooting&lt;/em&gt; then you should post
your question to the community &lt;code&gt;cert-manager&lt;/code&gt; &lt;a href=&#34;https://slack.k8s.io&#34;&gt;slack channel&lt;/a&gt;.
Many more people read this channel than GitHub issues, it&amp;rsquo;s likely your problem will
be solved quicker by using Slack.
Please also check that the bug has not already been filed by searching for key
terms in the issue search bar.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;re-opening-and-closing-issues&#34;&gt;(Re)opening and closing issues&lt;/h3&gt;
&lt;p&gt;Prow can assist you to reopen or close issues you file, you can trigger it using &lt;code&gt;/reopen&lt;/code&gt; or &lt;code&gt;/close&lt;/code&gt; in a GitHub Issue comment.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;p&gt;Feature requests should be created as
&lt;a href=&#34;https://github.com/jetstack/cert-manager/issues&#34;&gt;GitHub&lt;/a&gt; issues. They should contain
clear motivation for the feature you wish to see as well as some possible
solutions for how it can be implemented.
Issues should then be tagged with &lt;code&gt;kind/feature&lt;/code&gt;. To do this add &lt;code&gt;/kind feature&lt;/code&gt; to your issue description.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Note: It is often a good idea to bring your feature request up on the
community &lt;code&gt;cert-manager&lt;/code&gt; &lt;a href=&#34;https://slack.k8s.io&#34;&gt;slack channel&lt;/a&gt; to discuss whether
the feature request has already been made or is aligned with the project&amp;rsquo;s
priorities.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;creating-pull-requests&#34;&gt;Creating Pull Requests&lt;/h2&gt;
&lt;p&gt;Changes to the cert-manager code base is done via &lt;a href=&#34;https://github.com/jetstack/cert-manager/pulls&#34;&gt;pull
requests&lt;/a&gt;. Each pull request
should ideally have a corresponding issue attached that is to be fixed by this
pull request. It is valid for multiple pull requests to resolve a single issue
in the interest of keeping code changes self contained and simpler to review.&lt;/p&gt;
&lt;p&gt;Once created, a team member will assign themselves for review and enable
testing. To make sure the changes get merged, keep an eye out for reviews which
can have multiple cycles.&lt;/p&gt;
&lt;p&gt;If the pull request is a critical bug fix then this will probably
also be cherry picked to the current stable version of cert-manager as a patch
release.&lt;/p&gt;
&lt;p&gt;To let people know that your PR is still a work in progress, we usually add a
&lt;code&gt;WIP:&lt;/code&gt; prefix to the title of the PR. Prow will then automatically set the label
&lt;code&gt;do-not-merge/work-in-progress&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;cherry-picking&#34;&gt;Cherry Picking&lt;/h3&gt;
&lt;p&gt;If the pull request contains a critical bug fix then this should be cherry picked in to the current stable cert-manager branch
and &lt;a href=&#34;../../docs/installation/supported-releases/#support-policy&#34;&gt;released as a patch release&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;To trigger the cherry-pick process, add a comment to the GitHub PR.
For example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;/cherry-pick release-x.y
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The &lt;code&gt;jetstack-bot&lt;/code&gt; will then create a new branch and a PR against the release branch,
which should be reviewed, approved and merged using the process described above.&lt;/p&gt;
&lt;h3 id=&#34;dco-signoff&#34;&gt;DCO signoff&lt;/h3&gt;
&lt;p&gt;All commits in the PR should be signed off, more info on how to do this is at the &lt;a href=&#34;../sign-off/&#34;&gt;DCO Sign Off&lt;/a&gt; page.
Exceptions can only be made for small documentation fixes.&lt;/p&gt;
&lt;h2 id=&#34;project-management&#34;&gt;Project Management&lt;/h2&gt;
&lt;p&gt;Most of cert-manager&amp;rsquo;s project management is done on GitHub, with the help of Prow.&lt;/p&gt;
&lt;h3 id=&#34;when-will-something-be-released&#34;&gt;When will something be released?&lt;/h3&gt;
&lt;p&gt;Our team works using &lt;a href=&#34;https://github.com/jetstack/cert-manager/milestones&#34;&gt;GitHub milestones&lt;/a&gt;.
When a milestone is set on an Issue it is generally an indication of when we plan to address this.
Prow will apply milestones on merged PRs, this will tell you in which version that PR will land.&lt;/p&gt;
&lt;p&gt;The milestone page will also have an indicated due date when we will release. This might have some delay.
We brief our users/contributors about this in our bi-weekly community meeting, for an up to date status report we recommend joining these.&lt;/p&gt;
&lt;h3 id=&#34;labels&#34;&gt;Labels&lt;/h3&gt;
&lt;p&gt;We make a heavy use of GitHub labels for PRs and Issues. The ones on PRs are mostly managed by Prow and code reviewers.
In issues we always aim to add 3 types: area, priority and kind. These are set using Prow using &lt;code&gt;/area&lt;/code&gt;, &lt;code&gt;/kind&lt;/code&gt; and &lt;code&gt;/priority&lt;/code&gt;.
Sometimes &lt;code&gt;/triage&lt;/code&gt; is also added which helps us when following up Issues.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Area indicates the code area which is/will need changing&lt;/li&gt;
&lt;li&gt;Kind indicates if it is a &lt;code&gt;bug&lt;/code&gt; or a &lt;code&gt;feature&lt;/code&gt; but also can be &lt;code&gt;documentation&lt;/code&gt; or &lt;code&gt;cleanup&lt;/code&gt; (general maintenance)&lt;/li&gt;
&lt;li&gt;Priority is the priority it has for the cert-manager team, PRs are still very welcome for those!&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;assignees-meaning-in-prs-and-issues&#34;&gt;Assignees meaning in PRs and issues&lt;/h3&gt;
&lt;p&gt;Sometimes, you might see someone commenting with the
&lt;a href=&#34;https://prow.build-infra.jetstack.net/command-help#assign&#34;&gt;&lt;code&gt;/assign&lt;/code&gt; prow command&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-plain&#34; data-lang=&#34;plain&#34;&gt;/assign @meyskens
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Here is the meaning that we give to the GitHub assignees:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;On issues, it means that the assignee is working on it.&lt;/li&gt;
&lt;li&gt;On PRs, we use it as a way to know who should be taking a look at the PR at any time:
&lt;ul&gt;
&lt;li&gt;When the author is assigned, it means the PR needs work to be done aka &amp;ldquo;changes requested&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;When nobody is assigned, it means this PR needs review;&lt;/li&gt;
&lt;li&gt;When someone different from the author is assigned, it means this person is reviewing this PR.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;triage-party&#34;&gt;Triage Party!&lt;/h3&gt;
&lt;p&gt;Every few weeks we will plan a Triage Party meeting, where we use the (Triage Party)[https://triage.build-infra.jetstack.net/] tool to go recent/old issues to prioritise them so we can address them in a timely matter. These meetings are open to everyone and invites will be sent out using our mailing list (warning: despite the word party these meetings are sometimes boring).&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: CRDs</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/crds/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/crds/</guid>
      <description>
        
        
        &lt;p&gt;cert-manager is a heavy user of &lt;a href=&#34;https://kubernetes.io/docs/concepts/extend-kubernetes/api-extension/custom-resources/&#34;&gt;Kubernetes Custom Resources&lt;/a&gt;.
Chances are high that you may need to change something in our Custom Resource Definition. This guide will give you some tips!&lt;/p&gt;
&lt;h2 id=&#34;generating-updates&#34;&gt;Generating updates&lt;/h2&gt;
&lt;p&gt;We use &lt;a href=&#34;https://book.kubebuilder.io/reference/controller-gen.html&#34;&gt;&lt;code&gt;controller-gen&lt;/code&gt;&lt;/a&gt; to update our CRDs.
This all is handled using Bazel, just run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./hack/update-all.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This will also update the version conversion code if needed.&lt;/p&gt;
&lt;h2 id=&#34;versions&#34;&gt;Versions&lt;/h2&gt;
&lt;p&gt;cert-manager currently has 4 CRD versions in use:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;v1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v1beta1&lt;/code&gt; (deprecated in cert-manager &lt;code&gt;v1.4.0&lt;/code&gt;, removed &lt;code&gt;v1.6.0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v1alpha3&lt;/code&gt; (deprecated in cert-manager &lt;code&gt;v1.4.0&lt;/code&gt;, removed &lt;code&gt;v1.6.0&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v1alpha2&lt;/code&gt; (deprecated in cert-manager &lt;code&gt;v1.4.0&lt;/code&gt;, removed &lt;code&gt;v1.6.0&lt;/code&gt;)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;These versions are defined in &lt;a href=&#34;https://github.com/jetstack/cert-manager/tree/master/pkg/apis/certmanager&#34;&gt;&lt;code&gt;//pkg/apis/certmanager&lt;/code&gt;&lt;/a&gt;. ACME related resources are in &lt;a href=&#34;https://github.com/jetstack/cert-manager/tree/master/pkg/apis/certmanager&#34;&gt;&lt;code&gt;//pkg/apis/acme&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;If you need to introduce a new field in any of them it &lt;strong&gt;must&lt;/strong&gt; be present in all 4 versions so conversion can be used.&lt;/p&gt;
&lt;p&gt;Code comments on these fields are being converted into documentation on our website and text of &lt;code&gt;kubectl explain&lt;/code&gt;.
These comments should be written to be user-facing not developer-facing, they also break the Go standards of code comments on purpose for this reason.&lt;/p&gt;
&lt;p&gt;We also have an internal API version, it lives at &lt;a href=&#34;https://github.com/jetstack/cert-manager/tree/master/pkg/internal/apis&#34;&gt;&lt;code&gt;//pkg/internal/apis&lt;/code&gt;&lt;/a&gt;.
This is a version that is only used for validation and conversion, controllers should not use it as it is not meant to be user-friendly and not stable.
However all new fields also have to be added here for the conversion logic to work.&lt;/p&gt;
&lt;p&gt;See the &lt;a href=&#34;https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definition-versioning/&#34;&gt;official Kubernetes docs for CRD versioning&lt;/a&gt; to understand conversion, which versions are stored and served etc.&lt;/p&gt;
&lt;h2 id=&#34;kubebuilder&#34;&gt;Kubebuilder&lt;/h2&gt;
&lt;p&gt;While cert-manager doesn&amp;rsquo;t fully use Kubebuilder for everything CRDs can make use of special Kubebuilder flags such as &lt;a href=&#34;https://book.kubebuilder.io/reference/markers/crd-validation.html&#34;&gt;validation flags&lt;/a&gt;. We recommend reading the Kubebuilder book to learn more about them!&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: DCO Sign Off</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/sign-off/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/sign-off/</guid>
      <description>
        
        
        &lt;p&gt;All authors to the project retain copyright to their work. However, to ensure
that they are only submitting work that they have rights to, we are requiring
everyone to acknowledge this by signing their work.&lt;/p&gt;
&lt;p&gt;Any copyright notices in this repo should specify the authors as &amp;ldquo;the Jetstack
cert-manager contributors&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;To sign your work, just add a line like this at the end of your commit message:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Signed-off-by: Joe Bloggs &amp;lt;joe@example.com&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;This can easily be done with the &lt;code&gt;--signoff&lt;/code&gt; option to &lt;code&gt;git commit&lt;/code&gt;.
You can also mass sign-off a whole PR with &lt;code&gt;git rebase --signoff master&lt;/code&gt;,
replacing &lt;code&gt;master&lt;/code&gt; with the branch you are creating a pull request again if
not master.&lt;/p&gt;
&lt;p&gt;By doing this you state that you certify the following (from &lt;a href=&#34;https://developercertificate.org/&#34;&gt;https://developercertificate.org/&lt;/a&gt;):&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Developer Certificate of Origin
Version 1.1

Copyright (C) 2004, 2006 The Linux Foundation and its contributors.
1 Letterman Drive
Suite D4700
San Francisco, CA, 94129

Everyone is permitted to copy and distribute verbatim copies of this
license document, but changing it is not allowed.


Developer&#39;s Certificate of Origin 1.1

By making a contribution to this project, I certify that:

(a) The contribution was created in whole or in part by me and I
    have the right to submit it under the open source license
    indicated in the file; or

(b) The contribution is based upon previous work that, to the best
    of my knowledge, is covered under an appropriate open source
    license and I have the right under that license to submit that
    work with modifications, whether created in whole or in part
    by me, under the same open source license (unless I am
    permitted to submit under a different license), as indicated
    in the file; or

(c) The contribution was provided directly to me by some other
    person who certified (a), (b) or (c) and I have not modified
    it.

(d) I understand and agree that this project and the contribution
    are public and that a record of the contribution (including all
    personal information I submit with it, including my sign-off) is
    maintained indefinitely and may be redistributed consistent with
    this project or the open source license(s) involved.
&lt;/code&gt;&lt;/pre&gt;
      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Developing with Kind</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/kind/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/kind/</guid>
      <description>
        
        
        &lt;p&gt;Kind is a tool to quickly provision Kubernetes clusters locally using nested
docker containers with no requirement for virtual machines. These clusters can
be easily created and destroyed and are useful for simple testing for
development.&lt;/p&gt;
&lt;p&gt;To setup the development cluster and building cert-manager you will need the
following installed:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.bazel.build/versions/master/install.html&#34;&gt;Bazel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://store.docker.com/search?type=edition&amp;amp;offering=community&#34;&gt;Docker&lt;/a&gt; (and
enable for non-root user)&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetes.io/docs/tasks/tools/install-kubectl/&#34;&gt;&lt;code&gt;kubectl&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;start-kind-cluster&#34;&gt;Start Kind Cluster&lt;/h2&gt;
&lt;p&gt;To start the development cluster run the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;K8S_VERSION&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;1.19 &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# optional: this allows you to test different Kubernetes versions&lt;/span&gt;
$ ./devel/cluster/create.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; this script will setup the kind cluster using a specific service CIDR to make e2e tests able to use certain fixed IPs&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Once complete, the cluster is able to be interacted with &lt;code&gt;kubectl&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;building-and-deploying-cert-manager&#34;&gt;Building and deploying cert-manager&lt;/h2&gt;
&lt;p&gt;You can build a development build of cert-manager that will be loaded into your
&lt;code&gt;kind&lt;/code&gt; cluster.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ ./devel/addon/certmanager/install.sh 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; DNS solver is set to the internal &lt;code&gt;bind&lt;/code&gt; server for running tests, make sure to also run &lt;code&gt;./devel/addon/bind/install.sh&lt;/code&gt; if you need DNS01 to work.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;The images are now available on the cluster with the following tags:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;quay.io/jetstack/cert-manager-controller:build
quay.io/jetstack/cert-manager-cainjector:build
quay.io/jetstack/cert-manager-acmesolver:build
quay.io/jetstack/cert-manager-webhook:build
&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;generating-crds&#34;&gt;Generating CRDs&lt;/h2&gt;
&lt;p&gt;After changes have been made to the API, the Custom Resource Definitions can be
re-generated with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;./hack/update-crds.sh
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;destroy-the-cluster&#34;&gt;Destroy the Cluster&lt;/h2&gt;
&lt;p&gt;To clean up the development cluster run the following kind command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ kind delete cluster
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: DNS Providers</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/dns-providers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/dns-providers/</guid>
      <description>
        
        
        &lt;h2 id=&#34;creating-dns-providers&#34;&gt;Creating DNS Providers&lt;/h2&gt;
&lt;p&gt;Due to the large number of requests to support DNS providers to resolve DNS
challenges, it have become unpractical and unfeasible to maintain and test all
coming in. For this reason, it has been decided to instead support out-of-tree
DNS providers via way of an external webhook.&lt;/p&gt;
&lt;p&gt;To implement an external DNS provider webhook, it is recommended to base your
implementation on the &lt;a href=&#34;https://github.com/jetstack/cert-manager-webhook-example&#34;&gt;example
repository&lt;/a&gt;. Please
reach out on the &lt;code&gt;cert-manager-dev&lt;/code&gt; channel on the &lt;a href=&#34;https://slack.k8s.io&#34;&gt;community
slack&lt;/a&gt; for advise and guidance on getting a DNS webhook
running and released.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Feature Policy</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/policy/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/policy/</guid>
      <description>
        
        
        &lt;p&gt;We are open to feature requests and PRs implementing those. If you plan on contributing a new feature into cert-manager we recommend creating an issue first for it to be discussed with the cert-manager maintainers. Another possibility is bringing it up in a community meeting discussion for an open discussion with the maintainers and community on the implementation.&lt;/p&gt;
&lt;h1 id=&#34;features-we-will-not-allow&#34;&gt;Features we will not allow&lt;/h1&gt;
&lt;p&gt;Certain features have been requested before, but have not been implemented properly or not able to be implemented without breaking the security model.&lt;/p&gt;
&lt;p&gt;Below is a list of a few of these:&lt;/p&gt;
&lt;h2 id=&#34;vendoring-kubernetes-related-apis-outside-of-the-k8s-io-namespace&#34;&gt;Vendoring Kubernetes related APIs outside of the &lt;code&gt;k8s.io/&lt;/code&gt; namespace&lt;/h2&gt;
&lt;p&gt;Vendoring project APIs that also vendor &lt;code&gt;k8s.io/apimachinery&lt;/code&gt;, such as OpenShift, Contour, or Velero, is not recommend because the Kubernetes dependency is likely to conflict with cert-manager&amp;rsquo;s instance.
It could also cause a conflict with different Kubernetes client versions being used.&lt;/p&gt;
&lt;p&gt;If this is needed it is suggested to use a &amp;ldquo;dynamic client&amp;rdquo; that converts the objects into internal structured copied into the cert-manager codebase.&lt;/p&gt;
&lt;h2 id=&#34;helm-crds&#34;&gt;Helm + CRDs&lt;/h2&gt;
&lt;p&gt;Currently Helm suggests CRDs is to include them in the &lt;code&gt;crds/&lt;/code&gt; subdirectory of a chart with the &lt;code&gt;crd-install&lt;/code&gt; annotation included.
However this has the side effect that CRDs will not be upgraded any more if changes are made in a later release.
CRDs being upgraded without them being removed and re-installed is essential for cert-manager to move forward.
The mechanics of this are currently being discussed &lt;a href=&#34;https://github.com/helm/helm/issues/5871&#34;&gt;in the Helm community&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;cert-manager currently works around this by shipping the CRDs in the templates.&lt;/p&gt;
&lt;h2 id=&#34;helm-subchart-capabilities&#34;&gt;Helm Subchart capabilities&lt;/h2&gt;
&lt;p&gt;cert-manager should not be used as a sub-chart in Helm deployments.
Helm deployments are namespaced by design and do not support a dependency model that would support cert-manager being operated on a cluster scope nor preventing cert-manager from being installed twice (with conflicting versions) or being upgraded independently from the application.&lt;/p&gt;
&lt;p&gt;The cert-manager installation creates cluster scoped resources like admission webhooks and custom resource definitions. cert-manager should be seen as part of your cluster and should be treated as such for being installed. A comparison to other Kubernetes components would be a LoadBalancer controller or a PV provisioner&lt;/p&gt;
&lt;h2 id=&#34;secret-injection-or-copying&#34;&gt;Secret injection or copying&lt;/h2&gt;
&lt;p&gt;cert-manager deals with very sensitive information (all TLS certificates for your services) and has cluster-level access to secret resources, therefore when designing features we need to consider all ways these can be abused to escalate privilege.
Secret data is meant to be securely stored in the secret resources and have narrow scoped access privileges for unauthorized users. Therefore we will not allow any functionality that allows this data to be copied/injected into any resource other than a Kubernetes secret.&lt;/p&gt;
&lt;h3 id=&#34;cainjector&#34;&gt;cainjector&lt;/h3&gt;
&lt;p&gt;The cainjector component is a special exception to this rule as it deals in non-sensitive information (CAs, not cert/key pairs). This component is able to inject the &lt;code&gt;ca.crt&lt;/code&gt; file into predefined fields on &lt;code&gt;ValidatingWebhookConfiguration&lt;/code&gt;, &lt;code&gt;MutatingWebhookConfiguration&lt;/code&gt;, and &lt;code&gt;CustomResourceDefinition&lt;/code&gt; resources from Certificate resources.
These 3 components are already scoped only for privileged users, and will already give you cluster scoped access to resources.&lt;/p&gt;
&lt;p&gt;If you’re designing a resource that needs a CA Certificate or TLS key pair it is strongly recommended to use a reference to a secret instead of embedding it in a resource.&lt;/p&gt;
&lt;h2 id=&#34;cross-namespace-resources&#34;&gt;Cross namespace resources&lt;/h2&gt;
&lt;p&gt;Namespace boundaries in Kubernetes provide a barrier for access scopes. Apps or users can be limited to only access resources in a certain namespace. cert-manager is a controller that operates on cluster wide resources, while it may seems interesting to allow access to copy or write certificate data from one namespace to the other it will cause a bypass of this security model for all our users which is not intended and a security issue.
If this behavior is intended for your use case there are other Kubernetes controllers that will do this for you however we want to suggest a certain caution when installing these.&lt;/p&gt;
&lt;h2 id=&#34;sign-certificates-using-the-kubernetes-ca-used-for-your-nodes&#34;&gt;Sign certificates using the Kubernetes CA (used for your nodes)&lt;/h2&gt;
&lt;p&gt;Kubernetes has a Certificate Signing Requests API, and a &lt;code&gt;kubectl certificates&lt;/code&gt; command which allows you to approve certificate signing requests and have them signed by the certificate authority (CA) of the Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;This API and CLI have occasionally been misused to sign certificates for use by non-control-plane Pods but this is a mistake. For the security of the Kubernetes cluster, it is important to limit access to the Kubernetes certificate authority, and it is important that you do not use that certificate authority to sign certificates which are used outside of the control-plane, because such certificates increase the opportunity for attacks on the Kubernetes API server as this CA is used to sign certificates used for authorization against the API server it could allow any user who can create cert-manager resources to sign certificates trusted for API access.
(&lt;a href=&#34;../../faq/#kubernetes-has-a-builtin-certificatesigningrequest-api-why-not-use-that&#34;&gt;see our FAQ&lt;/a&gt;)&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Implementing External Issuers</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/external-issuers/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/external-issuers/</guid>
      <description>
        
        
        &lt;p&gt;cert-manager offers a number of &lt;a href=&#34;../../configuration/&#34;&gt;core issuer
types&lt;/a&gt; that represent certificate authorities
that can sign certificates when requested. As of &lt;code&gt;v0.11&lt;/code&gt;, cert-manager also
supports out-of-tree external issuers, and treats them the same as
in-tree issuer types. For more information on how to install and configure
external issuer types, read the documentation
&lt;a href=&#34;../../configuration/external/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;concepts&#34;&gt;Concepts&lt;/h2&gt;
&lt;p&gt;An issuer represents a certificate authority that signs incoming certificate
requests. In cert-manager, the &lt;code&gt;CertificateRequest&lt;/code&gt; resource represents a single
request for a signed certificate, containing the raw certificate request PEM
data as well as other information that can be used to describe the designed
certificate.&lt;/p&gt;
&lt;p&gt;In cert-manager, each issuer type has its own controller that watches these
&lt;code&gt;CertificateRequest&lt;/code&gt; resources and waits for one to be created which is meant
for itself. This is done by the &lt;code&gt;issuerRef&lt;/code&gt; stanza on the &lt;code&gt;CertificateRequest&lt;/code&gt;
which inside contains - name, kind, group. The &lt;code&gt;group&lt;/code&gt; denotes an API group, for
example &lt;code&gt;cert-manager.io&lt;/code&gt; which is responsible for all core issuer types. &lt;code&gt;kind&lt;/code&gt;
denotes the kind resource type of the issuer, such as an &lt;code&gt;Issuer&lt;/code&gt; or
&lt;code&gt;ClusterIssuer&lt;/code&gt;. Finally, the &lt;code&gt;name&lt;/code&gt; denotes the name of the issuer resource
inside of that kind.&lt;/p&gt;
&lt;p&gt;When an issuer controller observes a new &lt;code&gt;CertificateRequest&lt;/code&gt;, it ensure that
the request is meant for its controller type, and if so, then ensures that the
corresponding issuer resource exists in Kubernetes. If these are both true, it
will then use the information inside that issuer resource to attempt to create a
signed certificate, based upon the certificate request.&lt;/p&gt;
&lt;p&gt;Issuers must also ensure that before signing, the &lt;code&gt;CertificateRequest&lt;/code&gt; is
&lt;a href=&#34;../../concepts/certificaterequest/#approval&#34;&gt;&lt;code&gt;Approved&lt;/code&gt;&lt;/a&gt;. If the
&lt;code&gt;CertificateRequest&lt;/code&gt; is not &lt;code&gt;Approved&lt;/code&gt;, the issuer should not process it.
Issuers are not responsible for approving &lt;code&gt;CertificateRequests&lt;/code&gt;. Issuer
implementations may choose to support older versions of cert-manager (pre
&lt;code&gt;v1.3&lt;/code&gt;) by signing &lt;code&gt;CertificateRequests&lt;/code&gt; that will never have an approval
condition set.  Disabling this gate check should be an optional flag, and the
gate &lt;strong&gt;enabled by default&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;Once a signed certificate has been gathered by the issuer controller, it then
updates the status of the &lt;code&gt;CertificateRequest&lt;/code&gt; resource with the signed
certificate. It is then important to then update the condition status of that
resource to a ready state, as this is what is used to signal to higher order
controllers, such as the &lt;code&gt;Certificate&lt;/code&gt; controller, that the resource is ready to
be consumed. Conversely, if the &lt;code&gt;CertificateRequest&lt;/code&gt; fails, it is as important
to mark the resource as such, as this will also be used to signal to higher
order controllers. You can read the valid condition states
&lt;a href=&#34;../../concepts/certificaterequest/#conditions&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;implementation&#34;&gt;Implementation&lt;/h2&gt;
&lt;p&gt;It is recommended that you make use of the
&lt;a href=&#34;https://github.com/kubernetes-sigs/kubebuilder&#34;&gt;kubebuilder&lt;/a&gt; project in order
to implement your external issuer controller. This makes it very simple to
generate &lt;code&gt;CustomResourceDefinitions&lt;/code&gt; and gives you a lot of controller
functionality out of the box. If you have further questions on how to implement
an external issuer controller, it is best to reach out of the #cert-manager
&lt;a href=&#34;https://slack.k8s.io&#34;&gt;slack&lt;/a&gt; channel, or to join the weekly community calls which you
will be invited to once you join the &lt;a href=&#34;https://groups.google.com/forum/#!forum/cert-manager-dev&#34;&gt;Google
Group&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;sample-external-issuer&#34;&gt;Sample External Issuer&lt;/h2&gt;
&lt;p&gt;There is a &lt;a href=&#34;https://github.com/cert-manager/sample-external-issuer&#34;&gt;Sample External Issuer&lt;/a&gt;,
which is maintained by the cert-manager authors,
and which serves as an example of how to write an external issuer.&lt;/p&gt;
&lt;p&gt;The README file has step-by-step instructions on how to write an external issuer using Kubebuilder and controller-runtime,
and contains detailed notes on all the tools you will need.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Release Process</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/release-process/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/release-process/</guid>
      <description>
        
        
        &lt;p&gt;This document aims to outline the process that should be followed for
cutting a new release of cert-manager. If you would like to know more about
current releases and the timeline for future releases, take a look at the
&lt;a href=&#34;../../docs/installation/supported-releases/&#34;&gt;Supported Releases&lt;/a&gt; page.&lt;/p&gt;
&lt;h2 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h2&gt;
&lt;!--
About &#34;alert&#34; and &#34;pageinfo&#34;: https://www.docsy.dev/docs/adding-content/shortcodes/#shortcode-helpers
--&gt;


&lt;div class=&#34;pageinfo pageinfo-warning&#34;&gt;
&lt;p&gt;⛔️ Do not proceed with the release process if you do not meet all of the
following conditions:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;The release process &lt;strong&gt;takes about 40 minutes&lt;/strong&gt;. You must have time to
complete all the steps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You currently need to be at Jetstack to get the required GitHub and GCP
permissions. (we&amp;rsquo;d like contributors outside Jetstack to be able to get
access; if that&amp;rsquo;s of interest to you, please let us know).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to have the GitHub &lt;code&gt;admin&lt;/code&gt; permission on the cert-manager project.
To check that you have the &lt;code&gt;admin&lt;/code&gt; role, run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;brew install gh
gh auth login
gh api /repos/jetstack/cert-manager/collaborators/&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;$(&lt;/span&gt;gh api /user &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq -r .login&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;)&lt;/span&gt;/permission &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; jq .permission
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;If your permission is &lt;code&gt;admin&lt;/code&gt;, then you are good to go. To request the
&lt;code&gt;admin&lt;/code&gt; permission on the cert-manager project, &lt;a href=&#34;https://github.com/jetstack/platform-board/pulls/new&#34;&gt;open a
PR&lt;/a&gt; with a link to
here.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You need to be added as an &amp;ldquo;Editor&amp;rdquo; to the GCP project
&lt;a href=&#34;https://console.cloud.google.com/?project=cert-manager-release&#34;&gt;cert-manager-release&lt;/a&gt;.
To check if you do have access, try opening &lt;a href=&#34;https://console.cloud.google.com/cloud-build?project=cert-manager-release&#34;&gt;the Cloud Build
page&lt;/a&gt;.
To get the &amp;ldquo;Editor&amp;rdquo; permission on the GCP project, open a PR with your name
added to the maintainers list in
&lt;a href=&#34;https://github.com/jetstack/terraform-jetstack/blob/master/cert_manager_release.tf&#34;&gt;&lt;code&gt;cert_manager_release.tf&lt;/code&gt;&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-diff&#34; data-lang=&#34;diff&#34;&gt;&lt;span style=&#34;color:#a40000&#34;&gt;--- a/cert_manager_release.tf
&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;+++ b/cert_manager_release.tf
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;@@ -17,6 +17,7 @@ locals {
&lt;/span&gt;&lt;span style=&#34;color:#800080;font-weight:bold&#34;&gt;&lt;/span&gt;     var.personal_email[&amp;#34;...&amp;#34;],
     var.personal_email[&amp;#34;...&amp;#34;],
     var.personal_email[&amp;#34;...&amp;#34;],
&lt;span style=&#34;color:#00a000&#34;&gt;+    var.personal_email[&amp;#34;mael-valais&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#00a000&#34;&gt;&lt;/span&gt;   ])
 }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You may use the following PR description:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-markdown&#34; data-lang=&#34;markdown&#34;&gt;Title: Access to the cert-manager-release GCP project

Hi. As stated in &amp;#34;Prerequisites&amp;#34; on the [release-process][1] page,
I need access to the [cert-manager-release][2] project on GCP in
order to perform the release process. Thanks!

[1]: https://cert-manager.io/docs/contributing/release-process/#prerequisites
[2]: https://console.cloud.google.com/?project=cert-manager-release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;/div&gt;

&lt;p&gt;First, ensure that you have all the tools required to perform a cert-manager
release:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&#34;https://github.com/kubernetes/release/blob/master/cmd/release-notes/README.md&#34;&gt;&lt;code&gt;release-notes&lt;/code&gt;&lt;/a&gt; CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go install k8s.io/release/cmd/release-notes@v0.7.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install our &lt;a href=&#34;https://github.com/cert-manager/release&#34;&gt;&lt;code&gt;cmrel&lt;/code&gt;&lt;/a&gt; CLI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;go install github.com/cert-manager/release/cmd/cmrel@master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Clone the &lt;code&gt;cert-manager/release&lt;/code&gt; repo:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Don&amp;#39;t clone it from inside the cert-manager repo folder.&lt;/span&gt;
git clone https://github.com/cert-manager/release
&lt;span style=&#34;color:#204a87&#34;&gt;cd&lt;/span&gt; release
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Install the &lt;a href=&#34;https://cloud.google.com/sdk/&#34;&gt;&lt;code&gt;gcloud&lt;/code&gt;&lt;/a&gt; CLI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href=&#34;https://cloud.google.com/sdk/docs/authorizing#running_gcloud_auth_login&#34;&gt;Login&lt;/a&gt;
to &lt;code&gt;gcloud&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gcloud auth application-default login
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Make sure &lt;code&gt;gcloud&lt;/code&gt; points to the cert-manager-release project:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gcloud config &lt;span style=&#34;color:#204a87&#34;&gt;set&lt;/span&gt; project cert-manager-release
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;CLOUDSDK_CORE_PROJECT&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;cert-manager-release &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# this is used by cmrel&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Get a GitHub access token &lt;a href=&#34;https://github.com/settings/tokens&#34;&gt;here&lt;/a&gt;
with no scope ticked. It is used only by the &lt;code&gt;release-notes&lt;/code&gt; CLI to
avoid API rate limiting since it will go through all the PRs one by one.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;minor-releases&#34;&gt;Minor releases&lt;/h2&gt;
&lt;p&gt;A minor release is a backwards-compatible &amp;lsquo;feature&amp;rsquo; release. It can contain new
features and bug fixes.&lt;/p&gt;
&lt;h3 id=&#34;release-schedule&#34;&gt;Release schedule&lt;/h3&gt;
&lt;p&gt;We aim to cut a new minor release once per month. The rough goals for each
release are outlined as part of a GitHub milestone. We cut a release even if
some of these goals are missed, in order to keep up release velocity.&lt;/p&gt;
&lt;h3 id=&#34;process-for-releasing-a-version&#34;&gt;Process for releasing a version&lt;/h3&gt;


&lt;div class=&#34;pageinfo pageinfo-info&#34;&gt;
&lt;p&gt;🔰 Please click on the &lt;strong&gt;Edit this page&lt;/strong&gt; button on the top-right corner of this
page if a step is missing or if it is outdated.&lt;/p&gt;

&lt;/div&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Make sure to note which type of release you are doing. That will be helpful
in the next steps.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Type of release&lt;/th&gt;
&lt;th&gt;Example of git tag&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;initial alpha release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subsequent alpha release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;initial beta release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-beta.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;subsequent beta release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-beta.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;final release&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;patch release (or &amp;ldquo;point release&amp;rdquo;)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/br&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Make sure that a PR with the new upgrade
document is ready to be merged on
&lt;a href=&#34;https://github.com/cert-manager/website&#34;&gt;cert-manager/website&lt;/a&gt;. See for
example, see
&lt;a href=&#34;https://cert-manager.io/docs/installation/upgrading/upgrading-1.0-1.1/&#34;&gt;upgrading-1.0-1.1&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Update the release branch:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(initial alpha, subsequent alpha and initial beta)&lt;/strong&gt; The release branch
should already exist (it was created at the end of the last final
release). Update the release branch with the latest commits from the
master branch, as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the cert-manager repo folder.&lt;/span&gt;
git fetch --all
git branch --force release-1.0 origin/release-1.0
git checkout release-1.0
git merge --ff-only origin/master &lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# don&amp;#39;t run for a point release!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(subsequent beta, patch release and final release)&lt;/strong&gt;: do nothing since
things have been merged using &lt;code&gt;/cherry-pick release-1.0&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Note about the code freeze:&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The first beta starts a new &amp;ldquo;code freeze&amp;rdquo; period that lasts until the
final release. Just before the code freeze, we fast-forward everything
from master into the release branch.&lt;/p&gt;
&lt;p&gt;During the code freeze, we continue merging PRs into master as usual.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t fast-forward master into the release branch for the second (and
subsequent) beta, and only &lt;code&gt;/cherry-pick release-1.0&lt;/code&gt; the fixes that should be part
of the subsequent beta.&lt;/p&gt;
&lt;p&gt;We don&amp;rsquo;t fast-forward for patch releases and final releases; instead, we
prepare these releases using the &lt;code&gt;/cherry-pick release-1.0&lt;/code&gt; command.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the new or updated release branch:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Check that the &lt;code&gt;origin&lt;/code&gt; remote is correct. To do that, run the following
command and make sure it returns
the upstream &lt;code&gt;https://github.com/jetstack/cert-manager.git&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the cert-manager repo folder.&lt;/span&gt;
git remote -v &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;|&lt;/span&gt; grep origin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Push the release branch:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the cert-manager repo folder.&lt;/span&gt;
git push --set-upstream origin release-1.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;GitHub permissions&lt;/strong&gt;: &lt;code&gt;git push&lt;/code&gt; will only work if you have the
&lt;code&gt;admin&lt;/code&gt; GitHub permission on the cert-manager repo to create or push to
the branch, see &lt;a href=&#34;#prerequisites&#34;&gt;prerequisites&lt;/a&gt;. If you do not have this
permission, you will have to open a PR to merge master into the release
branch), and wait for the PR checks to become green.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate and edit the release notes:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Use the following two tables to understand how to fill in the four
environment variables needed for the next step. These four environment
variables are documented on the
&lt;a href=&#34;https://github.com/kubernetes/release/blob/master/cmd/release-notes/README.md#options&#34;&gt;README&lt;/a&gt;
for the Kubernetes &lt;code&gt;release-notes&lt;/code&gt; tool.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;START_REV&lt;/code&gt;*&lt;/td&gt;
&lt;td&gt;The git tag of the &amp;ldquo;previous&amp;rdquo;* release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;END_REV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of your release branch (inclusive)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BRANCH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Name of your release branch&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RELEASE_VERSION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;The git tag without the leading &lt;code&gt;v&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/br&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Examples for each release type (e.g., initial alpha release):&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Variable&lt;/th&gt;
&lt;th&gt;Example 1&lt;/th&gt;
&lt;th&gt;Example 2&lt;/th&gt;
&lt;th&gt;Example 2&lt;/th&gt;
&lt;th&gt;Example 3&lt;/th&gt;
&lt;th&gt;Example 4&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;initial alpha&lt;/td&gt;
&lt;td&gt;subsequent alpha&lt;/td&gt;
&lt;td&gt;beta release&lt;/td&gt;
&lt;td&gt;final release&lt;/td&gt;
&lt;td&gt;patch release&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-beta.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;START_REV&lt;/code&gt;*&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.2.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0-alpha.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.2.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;v1.3.0&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;END_REV&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;BRANCH&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;release-1.3&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;RELEASE_VERSION&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.3.0-alpha.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.3.0-alpha.1&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.3.0-beta.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.3.0&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1.3.1&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/br&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;*The git tag of the &amp;ldquo;previous&amp;rdquo; release (&lt;code&gt;START_REV&lt;/code&gt;) depends on which
type of release you count on doing. Look at the above examples to
understand a bit more what those are.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;After finding out the value for each of the 4 environment variables, set
the variables in your shell (for example, following the example 1):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;START_REV&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;v1.2.0&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;END_REV&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;release-1.3&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;BRANCH&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;release-1.3&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;RELEASE_VERSION&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.3.0-alpha.0&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Generate &lt;code&gt;release-notes.md&lt;/code&gt; at the root of your cert-manager repo folder
with the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the cert-manger folder.&lt;/span&gt;
&lt;span style=&#34;color:#204a87&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;GITHUB_TOKEN&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;*your-token*
go install k8s.io/release/cmd/release-notes@v0.7.0
release-notes --debug --repo-path cert-manager &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --org jetstack --repo cert-manager &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --required-author &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;jetstack-bot&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&lt;/span&gt;  --output release-notes.md
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&#34;pageinfo pageinfo-info&#34;&gt;&lt;p&gt;
 The GitHub token **does not need any scope**. The token is required
 only to avoid rate-limits imposed on anonymous API users.
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Sanity check the notes:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make sure you haven&amp;rsquo;t duplicated the final release note from the
previous release (&lt;code&gt;START_REV&lt;/code&gt; and &lt;code&gt;END_REV&lt;/code&gt; are inclusive)&lt;/li&gt;
&lt;li&gt;Make sure the notes contain details of all the features and bug
fixes that you expect to be in the release.&lt;/li&gt;
&lt;li&gt;Add additional blurb, notable items and characterize change log.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can see the commits that will go into this release by using the
&lt;a href=&#34;https://github.com/jetstack/cert-manager/compare&#34;&gt;GitHub compare&lt;/a&gt;. For
example, while releasing &lt;code&gt;v1.0.0&lt;/code&gt;, you want to compare it with the
latest pre-released version &lt;code&gt;v1.0.0-beta.1&lt;/code&gt;:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/jetstack/cert-manager/compare/v1.0.0-beta.1...master&#34;&gt;https://github.com/jetstack/cert-manager/compare/v1.0.0-beta.1...master&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Check the release notes include all changes
since the last final release.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;cmrel stage&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;In this example we stage a release using the &amp;lsquo;release-1.0&amp;rsquo; branch,
setting the release version to &lt;code&gt;v1.0.0&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the &amp;#34;cert-manager/release&amp;#34; repo folder.&lt;/span&gt;
cmrel stage --branch&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;release-1.0 --release-version&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1.0.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;This step takes ~10 minutes. It will build all Docker images and create
all the manifest files and upload them to a storage bucket on Google
Cloud. These artifacts will be published and released in the next steps.&lt;/p&gt;
 &lt;div class=&#34;pageinfo pageinfo-info&#34;&gt;&lt;p&gt;
 🔰 Remember to keep open the terminal where you run &lt;code&gt;cmrel stage&lt;/code&gt;. Its output will be used in the next step.
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the build is running, send a first Slack message to
&lt;code&gt;#cert-manager-dev&lt;/code&gt;:&lt;/p&gt;
 &lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&lt;p&gt;
 Releasing &lt;code&gt;1.2.0-alpha.2&lt;/code&gt; 🧵
 &lt;/p&gt;&lt;/div&gt;
 &lt;div class=&#34;pageinfo pageinfo-info&#34;&gt;&lt;p&gt;
 🔰 Please have a quick look at the build log as it might contain some unredacted
 data that we forgot to redact. We try to make sure the sensitive data is
 properly redacted but sometimes we forget to update this.
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a second Slack message in reply to this first message with the
Cloud Build job link that &lt;code&gt;cmrel&lt;/code&gt; displayed in &amp;ldquo;View logs at&amp;rdquo;. For
example, the message would look like:&lt;/p&gt;
 &lt;div class=&#34;pageinfo pageinfo-info&#34;&gt;&lt;p&gt;
 Follow the &lt;code&gt;cmrel stage&lt;/code&gt; build: https://console.cloud.google.com/cloud-build/builds/7641734d-fc3c-42e7-9e4c-85bfc4d1d547?project=1021342095237
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;cmrel publish&lt;/code&gt;:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Set the &lt;code&gt;CMREL_RELEASE_NAME&lt;/code&gt; variable in your shell. The value for the
&lt;code&gt;CMREL_RELEASE_NAME&lt;/code&gt; variable is found in the output of the previous command,
&lt;code&gt;cmrel stage&lt;/code&gt;. Look for the line that contains the &lt;code&gt;gs://&lt;/code&gt; link:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;gs://cert-manager-release/stage/gcb/release/v1.3.0-alpha.1-c2c0fdd78131493707050ffa4a7454885d041b08
&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;#                                           &amp;lt;---------- CMREL_RELEASE_NAME -----------------------&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Copy that part into a variable in your shell (no need to export it):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#000&#34;&gt;CMREL_RELEASE_NAME&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;v1.3.0-alpha.0-77b045d159bd20ce0ec454cd79a5edce9187bdd9
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Do a &lt;code&gt;cmrel publish&lt;/code&gt; dry-run to ensure that all the staged resources are
valid. Run the following command:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sh&#34; data-lang=&#34;sh&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the &amp;#34;cert-manager/release&amp;#34; repo folder.&lt;/span&gt;
cmrel publish --release-name &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$CMREL_RELEASE_NAME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;You can view the progress by clicking the Google Cloud Build URL in the
output of this command.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the build is running, send a third Slack message in reply to
the first message:&lt;/p&gt;
 &lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&lt;p&gt;
 Follow the `cmrel publish` dry-run build: https://console.cloud.google.com/cloud-build/builds16f6f875-0a23-4fff-b24d-3de0af207463?project=1021342095237
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Next publish the release artifacts for real. The following command will
publish &amp;ldquo;for real&amp;rdquo; the artifacts to GitHub, &lt;code&gt;Quay.io&lt;/code&gt;, to our
&lt;a href=&#34;https://charts.jetstack.io&#34;&gt;ChartMuseum&lt;/a&gt; instance:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the &amp;#34;cert-manager/release&amp;#34; repo folder.&lt;/span&gt;
cmrel publish --nomock --release-name &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;$CMREL_RELEASE_NAME&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt; &lt;div class=&#34;pageinfo pageinfo-warning&#34;&gt;&lt;p&gt;
 ⏰ Upon completion there will be:
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jetstack/cert-manager/releases&#34;&gt;A draft release of cert-manager on GitHub&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jetstack/jetstack-charts/pulls&#34;&gt;A pull request containing the new Helm chart&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;While the build is running, send a fourth Slack message in reply to
the first message:&lt;/p&gt;
 &lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&lt;p&gt;
 Follow the &lt;code&gt;cmrel publish&lt;/code&gt; build: https://console.cloud.google.com/cloud-build/builds/b6fef12b-2e81-4486-9f1f-d00592351789?project=1021342095237
 &lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Publish the GitHub release:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Visit the draft GitHub release and paste in the release notes that you
generated earlier. You will need to manually edit the content to match
the style of earlier releases. In particular, remember to remove
package-related changes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(initial alpha, subsequent alpha and beta only)&lt;/strong&gt; Tick the box &amp;ldquo;This is
a pre-release&amp;rdquo;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click &amp;ldquo;Publish&amp;rdquo; to make the GitHub release live. This will create a Git
tag automatically.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Merge the pull request containing the Helm chart:&lt;/p&gt;
&lt;p&gt;The Helm charts for cert-manager are served using Cloudflare pages
and the Helm chart files and metadata are stored in the &lt;a href=&#34;https://github.com/jetstack/jetstack-charts&#34;&gt;Jetstack charts repository&lt;/a&gt;.
The &lt;code&gt;cmrel publish --nomock&lt;/code&gt; step (above) will have created a PR in this repository which you now have to review and merge, as follows:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/jetstack/jetstack-charts/pulls&#34;&gt;Visit the pull request&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Review the changes&lt;/li&gt;
&lt;li&gt;Fix any failing checks&lt;/li&gt;
&lt;li&gt;Merge the PR&lt;/li&gt;
&lt;li&gt;Check that the &lt;a href=&#34;https://artifacthub.io/packages/helm/cert-manager/cert-manager&#34;&gt;cert-manager Helm chart is visible on ArtifactHUB&lt;/a&gt;.&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Add the new final release to the
&lt;a href=&#34;../../docs/installation/supported-releases/&#34;&gt;supported-releases&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Post a Slack message as an answer to the first message. Toggle the check
box &amp;ldquo;Also send to &lt;code&gt;#cert-manager-dev&lt;/code&gt;&amp;rdquo; so that the message is well
visible. Also cross-post the message on &lt;code&gt;#cert-manager&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;pageinfo pageinfo-primary&#34;&gt;&lt;p&gt;
https://github.com/jetstack/cert-manager/releases/tag/v1.0.0 🎉
&lt;/p&gt;&lt;/div&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Show the release to the world:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Send an email to
&lt;a href=&#34;https://groups.google.com/g/cert-manager-dev&#34;&gt;&lt;code&gt;cert-manager-dev@googlegroups.com&lt;/code&gt;&lt;/a&gt;
with the &lt;code&gt;release&lt;/code&gt; label
(&lt;a href=&#34;https://groups.google.com/g/cert-manager-dev?label=release&#34;&gt;examples&lt;/a&gt;).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send a tweet
(&lt;a href=&#34;https://twitter.com/MaartjeME/status/1286327362121084928&#34;&gt;example&lt;/a&gt;)
and make sure &lt;a href=&#34;https://twitter.com/JetstackHQ&#34;&gt;@JetstackHQ&lt;/a&gt; retweets it.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Proceed to the post-release steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Add the new final release to the
&lt;a href=&#34;../../docs/installation/supported-releases/&#34;&gt;supported-releases&lt;/a&gt; page.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Open a PR to
&lt;a href=&#34;https://github.com/jetstack/testing&#34;&gt;&lt;code&gt;jetstack/testing&lt;/code&gt;&lt;/a&gt; and change Prow&amp;rsquo;s
config. To do this, take inspiration from &lt;a href=&#34;https://github.com/jetstack/testing/pull/397/files&#34;&gt;Maartje&amp;rsquo;s PR
example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Push a new release branch to
&lt;a href=&#34;https://github.com/jetstack/cert-manager&#34;&gt;&lt;code&gt;jetstack/cert-manager&lt;/code&gt;&lt;/a&gt;. If the
final release is &lt;code&gt;v1.0.0&lt;/code&gt;, then push the new branch &lt;code&gt;release-1.1&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#8f5902;font-style:italic&#34;&gt;# Must be run from the cert-manager repo folder.&lt;/span&gt;
git checkout -b release-1.1 v1.0.0
git push origin release-1.1
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;(final release only)&lt;/strong&gt; Open a PR to
&lt;a href=&#34;https://github.com/cert-manager/website&#34;&gt;&lt;code&gt;cert-manager/website&lt;/code&gt;&lt;/a&gt; with
updates to the website configuration. To do this, take inspiration from
&lt;a href=&#34;ttps://github.com/cert-manager/website/pull/309/files&#34;&gt;Maartje&amp;rsquo;s PR
example&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Running End-to-End Tests</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/e2e/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/e2e/</guid>
      <description>
        
        
        &lt;p&gt;cert-manager has an extensive end-to-end (e2e) test suite that verifies functionality against a
real Kubernetes cluster.&lt;/p&gt;
&lt;p&gt;The full end-to-end test suite can take a long time to complete and is run against every pull
request made to the cert-manager project.&lt;/p&gt;
&lt;p&gt;Unless you&amp;rsquo;ve made huge changes to the cert-manager codebase &amp;mdash; or to the end-to-end
tests themselves &amp;mdash; you probably don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; to run the tests locally. If you do want to
run the tests, though, this document explains how.&lt;/p&gt;


&lt;div class=&#34;alert alert-primary&#34; role=&#34;alert&#34;&gt;
&lt;h4 class=&#34;alert-heading&#34;&gt;TestGrid Alerts&lt;/h4&gt;

    The status of each commit on the master branch is reported on
&lt;a href=&#34;https://testgrid.k8s.io/jetstack-cert-manager-master&#34;&gt;&lt;code&gt;testgrid.k8s.io&lt;/code&gt;&lt;/a&gt;. Join the
&lt;a href=&#34;https://groups.google.com/g/cert-manager-dev-alerts&#34;&gt;&lt;code&gt;cert-manager-dev-alerts&lt;/code&gt;&lt;/a&gt;
Google group to receive email notifications when tests fail.

&lt;/div&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;p&gt;There are a small number of required tools which &lt;strong&gt;must&lt;/strong&gt; be installed on your machine
to run the tests:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bazel&lt;/code&gt;: Builds cert-manager and the end-to-end tests themselves&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kind&lt;/code&gt;: Provisions a Kubernetes cluster inside docker.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;docker&lt;/code&gt;: Required by kind.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;kubectl&lt;/code&gt;: A relatively new version of &lt;code&gt;kubectl&lt;/code&gt; should be available on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;set-up-end-to-end-tests&#34;&gt;Set up End-to-End Tests&lt;/h2&gt;
&lt;p&gt;The test requires a kind cluster to run against. Note that the tests assume a certain configuration
for the kind cluster, and you should be sure to use this script rather than creating a cluster manually
unless you&amp;rsquo;re sure you&amp;rsquo;ve mimicked the required configuration:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ export K8S_VERSION=1.19 # optional: this allows you to test different Kubernetes versions
$ ./devel/cluster/create-kind.sh
...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;There are also certain dependencies which the test requires, which can also be installed using
a helper script:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./devel/setup-e2e-deps.sh
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: If you only need to update one dependency in the testing cluster, you can instead run
&lt;code&gt;./devel/addon/&amp;lt;name&amp;gt;/install.sh&lt;/code&gt; to save some time.&lt;/p&gt;
&lt;h2 id=&#34;run-end-to-end-tests&#34;&gt;Run End-to-End Tests&lt;/h2&gt;
&lt;p&gt;The following script will run the tests. Note that the tests produce a lot of output, and take
some time (often well over 30 minutes) to complete:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./devel/run-e2e.sh
... lots of output ...
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;strong&gt;NB:&lt;/strong&gt; If you don&amp;rsquo;t use &lt;code&gt;create-kind.sh&lt;/code&gt; to create the kind cluster, the ACME HTTP01 end-to-end tests will fail,
as they require the &amp;lsquo;service CIDR&amp;rsquo; to be set to &lt;code&gt;10.0.0.0/16&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;This is because the ingress controller is deployed with the fixed IP &lt;code&gt;10.0.0.15&lt;/code&gt; to allow
&lt;a href=&#34;https://github.com/letsencrypt/pebble&#34;&gt;Pebble&lt;/a&gt; to access it on a predictable address for end-to-end tests; our
test DNS name &lt;code&gt;certmanager.kubernetes.network&lt;/code&gt; points to &lt;code&gt;10.0.0.15&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;If you don&amp;rsquo;t want to run every test, you can focus on specific parts using &lt;code&gt;--ginkgo.focus&lt;/code&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;$ ./devel/run-e2e.sh --ginkgo.focus &amp;quot;&amp;lt;text regex&amp;gt;&amp;quot;

# example: run any test which has &amp;quot;basicConstraint&amp;quot; in the description
$ ./devel/run-e2e.sh --ginkgo.focus &amp;quot;basicConstraint&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;More info on how to use this can be found in the &lt;a href=&#34;https://onsi.github.io/ginkgo/#focused-specs&#34;&gt;Ginkgo focused-specs documentation&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&#34;end-to-end-test-structure&#34;&gt;End-to-End Test Structure&lt;/h2&gt;
&lt;p&gt;The end-to-end tests consist of 2 big parts: the issuer specific tests and the conformance suite. Both parts use
&lt;a href=&#34;https://onsi.github.io/ginkgo/#getting-ginkgo&#34;&gt;Ginkgo&lt;/a&gt; to run their tests.&lt;/p&gt;
&lt;h3 id=&#34;conformance-suite&#34;&gt;Conformance Suite&lt;/h3&gt;
&lt;h3 id=&#34;rbac&#34;&gt;RBAC&lt;/h3&gt;
&lt;p&gt;This suite tests all RBAC permissions granted to cert-manager on the cluster to check that it is able to operate correctly.&lt;/p&gt;
&lt;h3 id=&#34;certificates&#34;&gt;Certificates&lt;/h3&gt;
&lt;p&gt;This suite tests certificate functionality against all issuers.&lt;/p&gt;
&lt;h4 id=&#34;feature-sets&#34;&gt;Feature Sets&lt;/h4&gt;
&lt;p&gt;Some issuers don&amp;rsquo;t support certain features, such as for example issuing Ed25519 certificates or adding an email address
to the X.509 SAN extension.&lt;/p&gt;
&lt;p&gt;Each test specifies a used feature using &lt;code&gt;s.checkFeatures(feature)&lt;/code&gt;, which is then checked against the issuer&amp;rsquo;s
&lt;code&gt;UnsupportedFeatures&lt;/code&gt; list. Tests which use a feature unsupported by an issuer are skipped for that issuer.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Coding Conventions</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/coding-conventions/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/coding-conventions/</guid>
      <description>
        
        
        &lt;p&gt;cert-manager, like most Go projects, delegates almost all stylistic choices to &lt;code&gt;gofmt&lt;/code&gt;,
with &lt;code&gt;goimports&lt;/code&gt; on top for organizing imports. Broadly speaking, if you set your editor to run
&lt;code&gt;goimports&lt;/code&gt; when you save a file, your code will be stylistically correct.&lt;/p&gt;
&lt;p&gt;cert-manager generally also follows the Kubernetes
&lt;a href=&#34;https://www.kubernetes.dev/docs/guide/coding-convention/&#34;&gt;coding conventions&lt;/a&gt; and the Google
&lt;a href=&#34;https://github.com/golang/go/wiki/CodeReviewComments&#34;&gt;Go code review comments&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;organizing-imports&#34;&gt;Organizing Imports&lt;/h2&gt;
&lt;p&gt;Imports should be organized into 3 blocks, with each block separated by two newlines:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;stdlib&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;external&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;internal&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;An example might be the following, taken from
&lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/0c71fe7795858b96cabcddabf706d997cd2fba3f/pkg/acme/accounts/client.go&#34;&gt;&lt;code&gt;pkg/acme/accounts/client.go&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;crypto/rsa&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;crypto/tls&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;net&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;net/http&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;time&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;acmeapi&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;golang.org/x/crypto/acme&amp;#34;&lt;/span&gt;

	&lt;span style=&#34;color:#000&#34;&gt;acmecl&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;github.com/jetstack/cert-manager/pkg/acme/client&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;acmeutil&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;github.com/jetstack/cert-manager/pkg/acme/util&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#000&#34;&gt;cmacme&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;github.com/jetstack/cert-manager/pkg/apis/acme/v1&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;github.com/jetstack/cert-manager/pkg/metrics&amp;#34;&lt;/span&gt;
	&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;github.com/jetstack/cert-manager/pkg/util&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Once this manual split of standard library, external and internal imports has been made, it will be
enforced automatically by &lt;code&gt;goimports&lt;/code&gt; when executed in the future.&lt;/p&gt;
&lt;h2 id=&#34;uk-vs-us-spelling&#34;&gt;UK vs. US spelling&lt;/h2&gt;
&lt;p&gt;For the sake of consistency, cert-manager uses en-US spelling for the
documentation in &lt;a href=&#34;https://cert-manager.io&#34;&gt;https://cert-manager.io&lt;/a&gt; as well as within the cert-manager
codebase. A comprehensive list of en-GB → en-US word substitution is available
on Ubuntu&amp;rsquo;s
&lt;a href=&#34;https://wiki.ubuntu.com/EnglishTranslation/WordSubstitution&#34;&gt;&lt;code&gt;WordSubstitution&lt;/code&gt;&lt;/a&gt;
page.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Reporting Security Issues</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/security/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/security/</guid>
      <description>
        
        
        &lt;p&gt;Security is the number one priority for cert-manager. If you think you&amp;rsquo;ve
found a vulnerability in any cert-manager project, please follow the
&lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/SECURITY.md&#34;&gt;vulnerability reporting process&lt;/a&gt;
documented in the main cert-manager repository.&lt;/p&gt;
&lt;p&gt;The reporting process is the same for all repositories under the
cert-manager organization. The process is documented in one place to ensure
a single source of truth and a single list of &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/SECURITY_CONTACTS.md&#34;&gt;security contacts&lt;/a&gt;.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>V1.4-Docs: Donating Third Party Code to cert-manager</title>
      <link>https://cert-manager.io/v1.4-docs/contributing/third-party-code-donation/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://cert-manager.io/v1.4-docs/contributing/third-party-code-donation/</guid>
      <description>
        
        
        &lt;p&gt;The cert-manager project welcomes external contributions and has benefited greatly from thousands
of commits from hundreds of different contributors. Most code is usually committed through pull
requests to a specific repo, whether that be the main cert-manager repository or one of the associated
repositories such as the website.&lt;/p&gt;
&lt;p&gt;Some contributions aren&amp;rsquo;t as well suited to that kind of workflow, however. That would most likely
be because their functionality doesn&amp;rsquo;t belong in any particular existing cert-manager repo, while still
relating to the cert-manager project.&lt;/p&gt;
&lt;p&gt;This document aims to address the donation of code to the cert-manager project, and to provide a
framework for sustainable contributions which can be tested and relied upon going forwards by both
cert-manager maintainers and users.&lt;/p&gt;
&lt;p&gt;The requirements in this document are based in part on what&amp;rsquo;s done for CoreDNS, Envoy, Kubernetes
and containerd.&lt;/p&gt;
&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;Code must be licensed appropriately, including any dependencies&lt;br&gt;
We&amp;rsquo;d prefer &lt;a href=&#34;https://tldrlegal.com/license/apache-license-2.0-(apache-2.0)&#34;&gt;Apache 2.0&lt;/a&gt; since that&amp;rsquo;s
what cert-manager &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/LICENSE&#34;&gt;uses&lt;/a&gt;, but the
license must be &lt;a href=&#34;https://opensource.org/licenses&#34;&gt;OSI approved&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Code must conform to CNCF standards and due diligence requirements&lt;br&gt;
You don&amp;rsquo;t need to go over this with a fine-toothed comb; the intent here is that no code donation
should have a negative effect on cert-manager&amp;rsquo;s progress as a CNCF project. See the
&lt;a href=&#34;https://github.com/cncf/toc/blob/main/process/dd-review-template.md&#34;&gt;CNCF due diligence template&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Must be sponsored by an existing maintainer&lt;br&gt;
An existing regular contributor to cert-manager must sponsor the adoption of any third party code
donation. This ensures that there&amp;rsquo;s a single point of contact for the party donating the code.&lt;/li&gt;
&lt;li&gt;Must pass cert-manager conformance tests&lt;br&gt;
This might not apply to all donations, but where conformance tests exist any donated code must
pass them. E.g. for &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/dffbf391dbb0fc6c1cfea62e561a9c6f54362ab0/test/e2e/suite/conformance/certificates/external/external.go#L41-L62&#34;&gt;external issuers&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Must provide a point-of-contact for questions about the project for at least 3 months after acceptance
We don&amp;rsquo;t anticipate that we&amp;rsquo;d need to reach out often after the donation has been accepted,
but it&amp;rsquo;s important to have someone we can reach out to if we need to.&lt;/li&gt;
&lt;li&gt;The donation must be a defined extension type or justify why it doesn&amp;rsquo;t belong in the main repositories&lt;br&gt;
E.g. an ACME DNS solver, a custom issuer or an ACME HTTP solver&lt;/li&gt;
&lt;li&gt;Code must have a similar level of quality to cert-manager itself
This could be enforced by, for example, running static analysis tools on the code base similar to
those used by cert-manager.&lt;/li&gt;
&lt;li&gt;Code must have a non-trivial test suite, including both unit tests and end-to-end tests
These tests must be able to be run in their entirety after a PR is raised against the repo. We don&amp;rsquo;t
need 100% code coverage, but there should be tests for important functionality.&lt;/li&gt;
&lt;li&gt;The project must adopt the cert-manager security policy and link back to the policy, as in e.g.
the &lt;a href=&#34;https://github.com/cert-manager/istio-csr/blob/master/SECURITY.md&#34;&gt;istio-csr &lt;code&gt;SECURITY.md&lt;/code&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Must have DCO sign-offs or coverage for all commits
To ensure that all code can legally be donated, all commits should have DCO sign-off or else have
a positive affirmation made by each contributor prior to donation. See below.&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;preferences&#34;&gt;Preferences&lt;/h2&gt;
&lt;p&gt;These items are not absolutely necessary but they definitely help if a code donation is to be accepted.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Should be written in Go&lt;br&gt;
We don&amp;rsquo;t &lt;em&gt;need&lt;/em&gt; code to be written in Go, but we&amp;rsquo;d much prefer that it is. Since cert-manager itself
is written in Go, code donations in Go allow us to use existing experience and tooling on Go code.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dco-signoff&#34;&gt;DCO Signoff&lt;/h2&gt;
&lt;p&gt;As a method of ensuring that the donator has permission to donate the code, we require DCO sign-offs -
or something equivalent - to be in place at the time of the donation.&lt;/p&gt;
&lt;p&gt;The cert-manager &lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/CONTRIBUTING.md#dco-sign-off&#34;&gt;DCO signoff process&lt;/a&gt;
would be appropriate. Existing contributors could bootstrap this process by creating an empty signed-off
with a note that previous code should be considered signed off as of that commit:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git commit --allow-empty --signoff --message&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;bootstrapping DCO signoff for past commits&amp;#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;after-donation&#34;&gt;After Donation&lt;/h2&gt;
&lt;p&gt;Code files in the donated repository must be updated to include the relevant
&lt;a href=&#34;https://github.com/jetstack/cert-manager/blob/master/hack/boilerplate/boilerplate.go.txt&#34;&gt;cert-manger boilerplate&lt;/a&gt;&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
