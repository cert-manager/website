#!/usr/bin/env bash

# Copyright 2019 The Jetstack cert-manager contributors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# This script constructs a 'content/' directory that contains content for all
# configured versions of the documentation.

set -o errexit
set -o nounset
set -o pipefail

REPO_ROOT="${REPO_ROOT:-$(cd "$(dirname "$0")/../.." && pwd)}"

if ! command -v go &>/dev/null; then
    echo "Ensure go command is installed"
    exit 1
fi

tmpdir="$(mktemp -d)"
cleanup() {
	export GO111MODULE="auto"
	echo "+++ Cleaning up temporary GOPATH"
	go clean -modcache
	rm -rf "${tmpdir}"
}
trap cleanup EXIT

# Create fake GOPATH
echo "+++ Creating temporary GOPATH"
export GOPATH="${tmpdir}/go"
export GO111MODULE="on"
GOROOT="$(go env GOROOT)"
export GOROOT
GOBIN="${tmpdir}/bin"
export GOBIN
go get github.com/ahmetb/gen-crd-api-reference-docs@v0.3.0

mkdir -p "${GOPATH}/src/github.com/jetstack"
gitdir="${GOPATH}/src/github.com/jetstack/cert-manager"
echo "+++ Cloning cert-manager repository..."
git clone "https://github.com/jetstack/cert-manager.git" "$gitdir"
cd "$gitdir"

# set arg1 to 1 to generate CLI reference for older versions
# current and next will always be generated
gencliversions="${1:-0}"

# genversion takes two arguments (branch in cert-manager repo and a directory in
# this repo under content/en) and generates API reference docs from cert-manager
# branch for the path in this repo.
genversion() {
	checkout "$1"
	gendocs "$2"
}

genversionwithcli() {
  genversion "$1" "$2"

  genclireference "$2" "cmd/acmesolver" "acmesolver"
  genclireference "$2" "cmd/cainjector" "cainjector"
  genclireference "$2" "cmd/ctl" "cmctl"
  genclireference "$2" "cmd/controller" "controller"
  genclireference "$2" "cmd/webhook" "webhook"

  # if any of the above steps succeeded copy over the index file
  if [ -d "$REPO_ROOT/content/en/$2/cli" ]; then
    cp "$REPO_ROOT/content/en/docs/cli/_index.md" "${REPO_ROOT}/content/en/$2/cli/"
  fi
}

checkout() {
	branch="$1"
	pushd "$gitdir"
	rm -rf vendor/
	echo "+++ Checking out branch $branch"
	git fetch origin "$branch"
	git reset --hard "origin/$branch"
	echo "+++ Running 'go mod vendor' (this may take a while)"
	go mod vendor
}
gendocs() {
	outputdir="$1"
	echo "+++ Generating reference docs..."
	"${GOBIN}/gen-crd-api-reference-docs" \
		-config "${REPO_ROOT}/scripts/gendocs/config.json" \
		-template-dir "${REPO_ROOT}/scripts/gendocs/templates" \
		-api-dir "./pkg/apis" \
		-out-file "${REPO_ROOT}/content/en/${outputdir}/reference/api-docs.md" \
		"$@"
	rm -rf vendor/
	popd
}

# genclireference will attempt to run main.go --help for the target and write the output to a markdown file
genclireference() {
  if [ ! -f "$2/main.go" ]; then
    echo "+++ target $2 does not exist, skipping..."
    return
  fi

  # hacky way to figure out if the target has the correct structure
  # differs between older version but this catches the corner cases
  if [[ ! -d "$2/app" ]] && [ ! -d "$2/cmd" ]; then
    echo "+++ app directory for $2 does not exist, skipping..."
    return
  fi

  # combined with the check above we can handle all versions
  # for example release-0.15 webhook has the correct directory structure but does not use cobra
  if ! grep -q "@com_github_spf13_cobra//:go_default_library" "$2/app/BUILD.bazel" && ! grep -q "@com_github_spf13_cobra//:go_default_library" "$2/cmd/BUILD.bazel"; then
    return
  fi

  outputdir="$1"
  target="$2"
  name="$3"
  echo "+++ Generating CLI reference docs for $target ..."

  mkdir -p "${REPO_ROOT}/content/en/${outputdir}/cli/"

  output=$(go run "$target/main.go" --help)
  cat > "${REPO_ROOT}/content/en/${outputdir}/cli/$name.md" << EOF
---
title: $name CLI reference
linkTitle: $name
weight: 960
type: "docs"
---
\`\`\`
$output
\`\`\`
EOF
}

# The branches named here exist in the `jetstack/cert-manager` repo.

genversionwithcli "release-1.7" "next-docs"

checkout "release-1.6"

# At the top of this script we pull the repository from the latest from master.
# These commands must follow an explicit checkout of the latest release,
# otherwise unreleased CLI flags are included.
# For 1.6 they must happen before removing the legacy APIs
# as it will not compile without them.
genclireference "docs" "cmd/acmesolver" "acmesolver"
genclireference "docs" "cmd/cainjector" "cainjector"
genclireference "docs" "cmd/ctl" "cmctl"
genclireference "docs" "cmd/controller" "controller"
genclireference "docs" "cmd/webhook" "webhook"

# In cert-manager 1.6 cert-manager.io and acme.cert-manager.io alpha and beta
# API versions are no longer served, but the apis are still in the codebase. We
# don't want to show the docs for those API versions so this is a workaround.
# This will only be necessary for the release-1.6 branch.
rm -r pkg/apis/acme/v1alpha2
rm -r pkg/apis/acme/v1alpha3
rm -r pkg/apis/acme/v1beta1
rm -r pkg/apis/certmanager/v1alpha2
rm -r pkg/apis/certmanager/v1alpha3
rm -r pkg/apis/certmanager/v1beta1
gendocs "docs"

checkout "release-1.6"
rm -r pkg/apis/acme/v1alpha2
rm -r pkg/apis/acme/v1alpha3
rm -r pkg/apis/acme/v1beta1
rm -r pkg/apis/certmanager/v1alpha2
rm -r pkg/apis/certmanager/v1alpha3
rm -r pkg/apis/certmanager/v1beta1
gendocs "v1.6-docs"

# to generate API and CLI reference documentation for older versions use the format below and run this script
# genversionwithcli "release-1.5" "v1.5-docs"

echo "Generated reference documentation"
